using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CommunicationLib
{
    /// <summary>
    ///  Class to generate specific URLs for server communication.
    ///  
    /// URLs are generated by means of an UrlMethod (resource or command; enum below class UrlRouter), the object type if there is an object request
    /// and some optional params. 
    /// In first place of the url the UrlMethod always resides. The object type is placed in second place, if given. Afterwards all given url params
    /// needed for the request are added. All single parts of the url are seperated by '/'.
    /// 
    /// Example of generated url: 'resource/{typename}s/{workflowId}'
    /// 
    /// All URLS in Rest-Kommunikation:
    /// resource/{typename}s
    /// resource/{typename}s 
    /// resource/{typename}s/startables
    /// resource/{typename}s/{workflowId}
    /// resource/{typename}s/{id}
    /// resource/{typename}s
    /// resource/{typename}s
    /// command/users/login
    /// command/workflows/start/{id}
    /// command/workflows/forward/{stepId}/{itemId}
    /// 
    /// </summary>
    public static class URLRouter
    {
        /// <summary>
        ///  Generate a url without typeparam mainly for command requests.
        /// </summary>
        /// <param name="method">The URL-Method (Enum beneath class)</param>
        /// <param name="values">route params</param>
        /// <returns>the url</returns>
        public static string generateUrl(UrlMethod method, params string [] values)
        {
            return generateUrl(method, null, values);
        }

        /// <summary>
        ///  Generate URL with typeparam.
        /// </summary>
        /// <param name="method">The URL-Method (Enum beneath class)</param>
        /// <param name="objType">type of requestet resource</param>
        /// <param name="values">route params</param>
        /// <returns>the url</returns>
        public static string generateUrl(UrlMethod method, Type objType, params string[] values)
        {
            String url = (method == UrlMethod.Resource) ? "resource" : "command";
           
            if (objType != null)
            {

                String typeName = objType.FullName.Split('.').Last().ToLower();
                url += "/" + typeName + "s";
            }

            // append all url params to url; seperated by '/'
            foreach (var val in values)
            {
                url += "/" + val;
            }
            
            return url;
        }
    }

    /// <summary>
    ///  Enum to define first part of the url.
    /// </summary>
    public enum UrlMethod
    {
        /// <summary>
        /// Defines the resource request method.
        /// </summary>
        Resource,

        /// <summary>
        /// Defines the operation request method.
        /// </summary>
        Operation
    };
}
